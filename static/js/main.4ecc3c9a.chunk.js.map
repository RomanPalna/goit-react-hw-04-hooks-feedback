{"version":3,"sources":["Components/Statistics.js","Components/Notification.js","Components/FeedbackOptions.js","Components/Section.js","Components/Feedback.js","App.js","index.js"],"names":["Statistics","bad","neutral","good","total","positivePercentage","Notification","message","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","shortid","generate","Section","title","children","Feedback","useState","setGood","setNeutral","setBad","countTotalFeedback","Object","keys","e","elem","target","this","percentage","isNaN","Math","round","countPositiveFeedbackPercentage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAWeA,EATI,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,+BACE,wCAAWF,KACX,2CAAcD,KACd,uCAAUD,KACV,yCAAYG,KACZ,qDAAwBC,EAAxB,WCJWC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,8BAAMA,K,gBCkB7BC,EAjBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,KAAK,SACLC,KAAMF,EACNG,QAASL,EAJX,SAMGE,GALII,IAAQC,kBCCRC,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,MCCU,SAASC,IAAY,IAAD,EACTC,mBAAS,GADA,mBAC1BnB,EAD0B,KACpBoB,EADoB,OAEHD,mBAAS,GAFN,mBAE1BpB,EAF0B,KAEjBsB,EAFiB,OAGXF,mBAAS,GAHE,mBAG1BrB,EAH0B,KAGrBwB,EAHqB,KAK3BC,EAAqB,WAEzB,OADcvB,EAAOD,EAAUD,GAiCjC,OACE,8BACE,eAAC,EAAD,CAASkB,MAAM,wBAAf,UACE,cAAC,EAAD,CACEV,QAASkB,OAAOC,KAAK3B,EAAKE,EAAMD,GAChCQ,gBAxBgB,SAACmB,GACvB,IAAMC,EAAOD,EAAEE,OAAOjB,KAEtB,OAAQgB,GACN,IAAK,OACHP,EAAQO,EAAO,GACf,MACF,IAAK,UACHN,EAAWM,EAAO,GAClB,MACF,IAAK,MACHL,EAAOK,EAAO,GACd,MAEF,QACE,WAW+B,IAA9BE,KAAKN,qBACJ,cAAC,EAAD,CAAcnB,QAAQ,sBAEtB,cAAC,EAAD,CACEJ,KAAMA,EACND,QAASA,EACTD,IAAKA,EACLG,MAAOsB,IACPrB,mBA5C8B,WACtC,IAAM4B,EAAc9B,EAAOuB,IAAwB,IAEnD,OAAIQ,MAAMD,GACD,EAEAE,KAAKC,MAAMH,GAsCQI,UCtDjBC,MAJf,WACE,OAAO,cAACjB,EAAD,KCETkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4ecc3c9a.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ bad, neutral, good, total, positivePercentage }) => (\r\n  <ul>\r\n    <li>Good: {good}</li>\r\n    <li>Neutral: {neutral}</li>\r\n    <li>Bad: {bad}</li>\r\n    <li>Total: {total}</li>\r\n    <li>Positive feedback: {positivePercentage}%</li>\r\n  </ul>\r\n);\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <div>{message}</div>;\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      {options.map(option => (\r\n        <button\r\n          key={shortid.generate()}\r\n          type=\"button\"\r\n          name={option}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.array.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Statistics from \"./Statistics\";\r\nimport Notification from \"./Notification\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\nimport Section from \"./Section\";\r\n\r\nexport default function Feedback() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const countTotalFeedback = () => {\r\n    const total = good + neutral + bad;\r\n    return total;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    const percentage = (good / countTotalFeedback()) * 100;\r\n\r\n    if (isNaN(percentage)) {\r\n      return 0;\r\n    } else {\r\n      return Math.round(percentage);\r\n    }\r\n  };\r\n\r\n  const onLeaveFeedback = (e) => {\r\n    const elem = e.target.name;\r\n\r\n    switch (elem) {\r\n      case \"good\":\r\n        setGood(elem + 1);\r\n        break;\r\n      case \"neutral\":\r\n        setNeutral(elem + 1);\r\n        break;\r\n      case \"bad\":\r\n        setBad(elem + 1);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions\r\n          options={Object.keys(bad, good, neutral)}\r\n          onLeaveFeedback={onLeaveFeedback}\r\n        />\r\n        {this.countTotalFeedback() === 0 ? (\r\n          <Notification message=\"No feedback given\" />\r\n        ) : (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={countTotalFeedback()}\r\n            positivePercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        )}\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n\r\n// export default class Feedback extends Component {\r\n//   static propTypes = {\r\n//     //\r\n//   };\r\n\r\n//   state = {\r\n//     good: 0,\r\n//     neutral: 0,\r\n//     bad: 0,\r\n//   };\r\n\r\n//   countGoodFeed = () => {\r\n//     this.setState(prevState => ({\r\n//       good: prevState.good + 1,\r\n//     }));\r\n//   };\r\n\r\n//   countNeutralFeed = () => {\r\n//     this.setState(prevState => ({\r\n//       neutral: prevState.neutral + 1,\r\n//     }));\r\n//   };\r\n\r\n//   countBadFeed = () => {\r\n//     this.setState(prevState => ({\r\n//       bad: prevState.bad + 1,\r\n//     }));\r\n//   };\r\n\r\n//   countTotalFeedback = () => {\r\n//     const { good, neutral, bad } = this.state;\r\n//     const total = good + neutral + bad;\r\n//     return total;\r\n//   };\r\n\r\n//   countPositiveFeedbackPercentage = () => {\r\n//     const percentage = (this.state.good / this.countTotalFeedback()) * 100;\r\n//     if (isNaN(percentage)) {\r\n//       return 0;\r\n//     } else {\r\n//       return Math.round(percentage);\r\n//     }\r\n//   };\r\n\r\n//   onLeaveFeedback = e => {\r\n//     const elem = e.target.name;\r\n//     this.setState(prevState => ({\r\n//       [elem]: prevState[elem] + 1,\r\n//     }));\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <Section title=\"Please leave feedback\">\r\n//           <FeedbackOptions\r\n//             options={Object.keys(this.state)}\r\n//             onLeaveFeedback={this.onLeaveFeedback}\r\n//           />\r\n//           {this.countTotalFeedback() === 0 ? (\r\n//             <Notification message=\"No feedback given\" />\r\n//           ) : (\r\n//             <Statistics\r\n//               good={this.state.good}\r\n//               neutral={this.state.neutral}\r\n//               bad={this.state.bad}\r\n//               total={this.countTotalFeedback()}\r\n//               positivePercentage={this.countPositiveFeedbackPercentage()}\r\n//             />\r\n//           )}\r\n//         </Section>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n","import Feedback from './Components/Feedback';\r\n\r\nfunction App() {\r\n  return <Feedback />;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}